{"version":3,"sources":["Form.js","Card.js","CreditCard.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","number","name","val","handleChange","bind","handleSubmit","e","this","setState","target","value","preventDefault","updateState","className","onChange","htmlFor","id","maxLength","Component","Card","src","alt","CreditCard","item","toUpperCase","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6VAyDeA,G,kBArDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,OAAQ,GACRC,KAAM,GACNC,IAAK,IAEP,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,E,0EAUNE,GACXC,KAAKC,SAAL,eACGF,EAAEG,OAAOR,KAAOK,EAAEG,OAAOC,U,mCAGjBJ,GACXA,EAAEK,iBAEFJ,KAAKT,MAAMc,YAAYL,KAAKR,S,+BAG5B,OACE,yBAAKc,UAAU,QACb,0BAAMC,SAAUP,KAAKF,cACnB,2BAAOU,QAAQ,UAAf,UACA,2BACEC,GAAG,SACHf,KAAK,SACLS,MAAOH,KAAKR,MAAMC,OAClBc,SAAUP,KAAKJ,aACfc,UAAU,OAEZ,2BAAOF,QAAQ,QAAf,QACA,2BACEC,GAAG,OACHf,KAAK,OACLS,MAAOH,KAAKR,MAAME,KAClBa,SAAUP,KAAKJ,aACfc,UAAU,OAEZ,2BAAOF,QAAQ,OAAf,SACA,2BACEC,GAAG,MACHf,KAAK,MACLS,MAAOH,KAAKR,MAAMG,IAClBY,SAAUP,KAAKJ,qB,GA9CRe,cC8CJC,G,kBA7Cb,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,sEAMjB,OACE,yBAAKc,UAAU,QACb,6CACA,yBACEO,IAAI,4FACJC,IAAI,KAEN,yBAAKR,UAAU,QACb,yBAAKA,UAAU,QACb,uBAAGA,UAAU,UAAUN,KAAKT,MAAME,QAClC,yBAAKa,UAAU,cACb,uBAAGA,UAAU,OAAb,QACA,yBAAKA,UAAU,cACb,yBAAKA,UAAU,aACb,sCAEE,0BAAMA,UAAU,QAAhB,SAGF,0BAAMA,UAAU,YAAhB,iBAEF,yBAAKA,UAAU,aAAf,aAEE,0BAAMA,UAAU,WAAWN,KAAKT,MAAMI,QAI5C,uBAAGW,UAAU,cAAcN,KAAKT,MAAMG,OAExC,yBACEY,UAAU,cACVO,IAAI,2F,GAtCGF,cCqCJI,G,kBAlCb,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,OAAQ,sBACRC,KAAM,SACNC,IAAK,SAEP,EAAKU,YAAc,EAAKA,YAAYR,KAAjB,gBAPF,E,yEAUPmB,GACVhB,KAAKC,SAAS,CACZR,OAAQuB,EAAKvB,OACbC,KAAMsB,EAAKtB,KAAKuB,cAChBtB,IAAKqB,EAAKrB,MAGZuB,QAAQC,IAAIH,K,+BAIZ,OACE,yBAAKV,UAAU,cACb,kBAAC,EAAD,CACEb,OAAQO,KAAKR,MAAMC,OACnBC,KAAMM,KAAKR,MAAME,KACjBC,IAAKK,KAAKR,MAAMG,MAElB,kBAAC,EAAD,CAAMU,YAAaL,KAAKK,mB,GA7BPM,c,MCOVS,MARf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,QCKce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.21aec453.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Form.css\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      number: \"\",\n      name: \"\",\n      val: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.props.updateState(this.state);\n  }\n  render() {\n    return (\n      <div className=\"Form\">\n        <form onChange={this.handleSubmit}>\n          <label htmlFor=\"number\">Number</label>\n          <input\n            id=\"number\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleChange}\n            maxLength=\"16\"\n          />\n          <label htmlFor=\"name\">Name</label>\n          <input\n            id=\"name\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n            maxLength=\"20\"\n          />\n          <label htmlFor=\"val\">Valid</label>\n          <input\n            id=\"val\"\n            name=\"val\"\n            value={this.state.val}\n            onChange={this.handleChange}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport \"./Card.css\";\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Card\">\n        <h1> CREDIT CARD </h1>\n        <img\n          src=\"https://cdn.iconscout.com/icon/premium/png-512-thumb/credit-card-chip-1522262-1288452.png\"\n          alt=\"\"\n        />\n        <div className=\"data\">\n          <div className=\"info\">\n            <p className=\"number\">{this.props.number}</p>\n            <div className=\"inner_info\">\n              <p className=\"num\">5422</p>\n              <div className=\"validation\">\n                <div className=\"validthru\">\n                  <span>\n                    VALID\n                    <span className=\"thru\">THRU</span>\n                  </span>\n\n                  <span className=\"triangle\">▶︎</span>\n                </div>\n                <div className=\"MONTHYEAR\">\n                  MONTH/YEAR\n                  <span className=\"MONYEAR\">{this.props.val}</span>\n                </div>\n              </div>\n            </div>\n            <p className=\"cardholder\">{this.props.name}</p>\n          </div>\n          <img\n            className=\"master_logo\"\n            src=\"https://www.logolynx.com/images/logolynx/e0/e01dbbb3068c7f5135b90b0ce91445f9.png\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport Card from \"./Card\";\nimport \"./CreditCard.css\";\n\nclass CreditCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      number: \"7253 3256 7895 1245\",\n      name: \"Foulen\",\n      val: \"20/20\"\n    };\n    this.updateState = this.updateState.bind(this);\n  }\n\n  updateState(item) {\n    this.setState({\n      number: item.number,\n      name: item.name.toUpperCase(),\n      val: item.val\n    });\n\n    console.log(item);\n  }\n\n  render() {\n    return (\n      <div className=\"CreditCard\">\n        <Card\n          number={this.state.number}\n          name={this.state.name}\n          val={this.state.val}\n        />\n        <Form updateState={this.updateState} />\n      </div>\n    );\n  }\n}\n\nexport default CreditCard;\n","import React from \"react\";\nimport CreditCard from \"./CreditCard\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CreditCard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}